// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CrudTest.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UpdateCustomerStepsFeature")]
    public partial class UpdateCustomerStepsFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UpdateCustomerSteps.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UpdateCustomerStepsFeature", "n order to update customer s\r\nas an Api consumer\r\nI want to update a customer thr" +
                    "ough the Api sytem", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update an exist customer by Id with different fields")]
        public virtual void UpdateAnExistCustomerByIdWithDifferentFields()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update an exist customer by Id with different fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("That customer exists in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Family",
                            "BirthDate",
                            "MobileNumber",
                            "CountryCode",
                            "Email",
                            "BankAccountNumber"});
                table1.AddRow(new string[] {
                            "1",
                            "Paghi",
                            "Geri",
                            "1983-05-03",
                            "9122140796",
                            "98",
                            "geramiraz1@yahoo.com",
                            "14"});
#line 10
 testRunner.When("I request to Update the user by Id with this details:", ((string)(null)), table1, "When ");
#line hidden
#line 14
 testRunner.Then("the user should be updated and the response status code will be \'200 Ok\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Updating a customer with invalid data with different fields")]
        [NUnit.Framework.CategoryAttribute("outline")]
        [NUnit.Framework.TestCaseAttribute("1", "\"\"", "\"Geramii\"", "\"1983-05-03\"", "9122140796", "98", "\"geramiraz@yahoo.com\"", "\"14\"", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Pari\"", "\"Geramii\"", "\"1983-05-03\"", "9122140796", "98", "\"geramiraz@yahoo.com\"", "\"\"", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Pari\"", "\"Geramii\"", "\"1983-05-03\"", "9122140796", "98", "\"\"", "\"14\"", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Pari\"", "\"Geramii\"", "\"1983-05-03\"", "9122140796", "0", "\"geramiraz@yahoo.com\"", "\"14\"", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Pari\"", "\"Geramii\"", "\"1983-05-03\"", "0", "98", "\"geramiraz@yahoo.com\"", "\"14\"", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Pari\"", "\"Geramii\"", "\"\"", "9122140796", "98", "\"geramiraz@yahoo.com\"", "\"14\"", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Pari\"", "\"\"", "\"1983-05-03\"", "9122140796", "98", "\"geramiraz@yahoo.com\"", "\"14\"", null)]
        public virtual void UpdatingACustomerWithInvalidDataWithDifferentFields(string id, string namee, string family, string birthDate, string mobileNumber, string countryCode, string email, string bankAccountNumber, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "outline"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("Namee", namee);
            argumentsOfScenario.Add("Family", family);
            argumentsOfScenario.Add("BirthDate", birthDate);
            argumentsOfScenario.Add("MobileNumber", mobileNumber);
            argumentsOfScenario.Add("CountryCode", countryCode);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("BankAccountNumber", bankAccountNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Updating a customer with invalid data with different fields", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given("That customer  exists in this system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When(string.Format("I request to update the user by id with some details : {0}  and {1}  and {2}  {3}" +
                            " and {4} and {5} and {6} and {7}", id, namee, family, birthDate, mobileNumber, countryCode, email, bankAccountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("user should not  be  updated and the response is error Statecode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
